{
	"name": "GamryFile2DB_RUI_OLD",
	"properties": {
		"description": "ToDo:\nRow Data als Header verwenden\nDataFlow \"Datei\" Variable einfÃ¼gen\n",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "mso033-synapse-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "LineReader"
				},
				{
					"linkedService": {
						"referenceName": "mso033-synapse-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "HeaderReader"
				}
			],
			"sinks": [
				{
					"name": "GamryMetaData"
				},
				{
					"name": "HeaderListingWithKey"
				},
				{
					"name": "HeaderListingWithoutKey"
				}
			],
			"transformations": [
				{
					"name": "EnhanceData"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "ColumnRename"
				},
				{
					"name": "MetaDataTable"
				},
				{
					"name": "SplitRows"
				},
				{
					"name": "SeriesDataSplit"
				},
				{
					"name": "DelLeadTab"
				},
				{
					"name": "ColumnSelectRename"
				},
				{
					"name": "ExtractHeader"
				},
				{
					"name": "StringToArray"
				},
				{
					"name": "ArrayToColumn"
				},
				{
					"name": "AbgeleiteteSpalte4"
				},
				{
					"name": "OnlyRawData"
				},
				{
					"name": "ChangeDelimiter"
				},
				{
					"name": "AddSort"
				},
				{
					"name": "AddIndex"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "Ersatzschlssel1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"script": "source(output(\n\t\t{_col0_} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'FileURL',\n\tformat: 'delimited',\n\tfileSystem: 'msopocfuelcell',\n\tfolderPath: 'T-21-211/_01/HFR',\n\tfileName: 'T-21-211-01_HFR_108_CurrVal_5.dta',\n\tcolumnDelimiter: '\\u0001',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: false,\n\tdateFormats: ['dd.MM.yyyy'],\n\ttimestampFormats: ['yyyy.MM.dd HH:mm:ss'],\n\tpreferredIntegralType: 'integer',\n\tpreferredFractionalType: 'float') ~> LineReader\nsource(useSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'msopocfuelcell',\n\tfolderPath: 'T-21-211/_01/HFR',\n\tfileName: 'T-21-211-01_HFR_108_CurrVal_5.dta',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: false) ~> HeaderReader\nColumnRename derive(RowType = length(split(RawData,'\\t')[1]),\n\t\tTestID = regexExtract(FileURL,'([T]-[0-9]{2}-[0-9]{2,4})',1)) ~> EnhanceData\nEnhanceData split(RowType>2,\n\tRowType<=2,\n\tdisjoint: false) ~> ConditionalSplit1@(MetaData, SeriesData, DustBin)\nLineReader select(mapColumn(\n\t\tRawData = {_col0_},\n\t\tFileURL\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnRename\nSplitRows pivot(groupBy(TestID),\n\tpivotBy(MetaParameter),\n\t{} = first(MetaValue),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> MetaDataTable\nConditionalSplit1@MetaData derive(MetaParameter = split(RawData,\"\\t\")[1],\n\t\tMetaUnit = split(RawData,\"\\t\")[2],\n\t\tMetaValue = split(RawData,\"\\t\")[3]) ~> SplitRows\nDelLeadTab split(and(not(isDouble(split(RawData,\"\\t\")[1])), instr(RawData,\"Pt\")>0),\n\tisDouble(split(RawData,\"\\t\")[1]),\n\tdisjoint: false) ~> SeriesDataSplit@(SDHeader, SDData, SDDustBin)\nConditionalSplit1@SeriesData derive(RawData = right(RawData,length(RawData)-1),\n\t\tDataType = size(split(RawData,'\\t')),\n\t\tRowType = type(split(RawData,'\\t')[2])) ~> DelLeadTab\nAbgeleiteteSpalte4 select(mapColumn(\n\t\tRawData,\n\t\tFileURL,\n\t\tRowType,\n\t\tTestID,\n\t\teach(match(type==\"float\"),\n\t\t\tHeaderListingWithKey#lookup($$).Header = $$)\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ColumnSelectRename\nHeaderReader filter(instr(toString(byName('_col0_')),\"Pt\")>0) ~> ExtractHeader\nExtractHeader derive(Header = split(right(toString(byName('_col0_')),length(toString(byName('_col0_')))-1),\"\\t\")) ~> StringToArray\nStringToArray foldDown(unroll(Header),\n\tmapColumn(\n\t\tHeader\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ArrayToColumn\nChangeDelimiter derive(SeriesData01 = toFloat(split(RawData,\"\\t\")[1]),\n\t\tSeriesData02 = toFloat(split(RawData,\"\\t\")[2]),\n\t\tSeriesData03 = toFloat(split(RawData,\"\\t\")[3]),\n\t\tSeriesData04 = toFloat(split(RawData,\"\\t\")[4]),\n\t\tSeriesData05 = toFloat(split(RawData,\"\\t\")[5]),\n\t\tSeriesData06 = toFloat(split(RawData,\"\\t\")[6]),\n\t\tSeriesData07 = toFloat(split(RawData,\"\\t\")[7]),\n\t\tSeriesData08 = toFloat(split(RawData,\"\\t\")[8]),\n\t\tSeriesData09 = toFloat(split(RawData,\"\\t\")[9]),\n\t\tSeriesData10 = toFloat(split(RawData,\"\\t\")[10]),\n\t\tSeriesData11 = toFloat(split(RawData,\"\\t\")[11]),\n\t\tSeriesData12 = toFloat(split(RawData,\"\\t\")[12]),\n\t\tSeriesData13 = toFloat(split(RawData,\"\\t\")[13]),\n\t\tSeriesData14 = toFloat(split(RawData,\"\\t\")[14])) ~> AbgeleiteteSpalte4\nSeriesDataSplit@SDHeader select(mapColumn(\n\t\tRawData\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OnlyRawData\nSeriesDataSplit@SDData derive(RawData = replace(RawData,\",\",\".\")) ~> ChangeDelimiter\nArrayToColumn derive(Header = Header,\n\t\tReihenfolge = 1) ~> AddSort\nAddSort window(asc(Reihenfolge, true),\n\tIndex = rowNumber()) ~> AddIndex\nAddIndex derive(Index = iif(length(toString(Index)) == 1 , \"SeriesData0\"+ toString(Index) , \"SeriesData\"+toString(Index) ),\n\t\tHeader = toString(Header)) ~> SelectColumns\nAddIndex keyGenerate(output(Index as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> Ersatzschlssel1\nAbgeleiteteSpalte4 derive(each(match(like(name,\"SeriesData%\")&&!isNull(name)&&!isNull(HeaderListingWithKey#lookup(name).Header)), iif( !isNull(HeaderListingWithKey#lookup($$).Header) ,HeaderListingWithKey#lookup($$).Header , \"Campo null \"  + toString(random(100)) ) = $$)) ~> DerivedColumn1\nDerivedColumn1 derive(Pt = toFloat(byName('Pt')),\n\t\tTime = toFloat(byName('Time')),\n\t\tFreq = toFloat(byName('Freq')),\n\t\tZreal = toFloat(byName('Zreal')),\n\t\tZimag = toFloat(byName('Zimag')),\n\t\tZsig = toFloat(byName('Zsig')),\n\t\tZmod = toFloat(byName('Zmod')),\n\t\tZphz = toFloat(byName('Zphz')),\n\t\tIdc = toFloat(byName('Idc')),\n\t\tVdc = toFloat(byName('Vdc')),\n\t\tIERange = toFloat(byName('IERange'))) ~> MapDrifted1\nMapDrifted1 select(mapColumn(\n\t\teach(match(!like(name,'SeriesData%')))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nMetaDataTable sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'default',\n\ttableName: 'bkt_GamryMetaData',\n\trecreate:true) ~> GamryMetaData\nSelectColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tkeys:['Index'],\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1,\n\tmapColumn(\n\t\tHeader,\n\t\tIndex\n\t)) ~> HeaderListingWithKey\nErsatzschlssel1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tstore: 'cache',\n\tformat: 'inline',\n\toutput: false,\n\tsaveOrder: 1) ~> HeaderListingWithoutKey"
		}
	}
}